@startuml

title __MORPH's Class Diagram__\n

  namespace com.pullenti.morph {
    class com.pullenti.morph.CharsInfo {
        + value : short
        + CharsInfo()
        + CharsInfo()
        {static} + _new2378()
        {static} + _new2553()
        {static} + _new2559()
        {static} + _new2564()
        {static} + _new2587()
        {static} + _new2866()
        + equals()
        + isAllLower()
        + isAllUpper()
        + isCapitalUpper()
        + isCyrillicLetter()
        + isLastLower()
        + isLatinLetter()
        + isLetter()
        {static} + ooEq()
        {static} + ooNoteq()
        + setAllLower()
        + setAllUpper()
        + setCapitalUpper()
        + setCyrillicLetter()
        + setLastLower()
        + setLatinLetter()
        + setLetter()
        + toString()
        - getValue()
        - setValue()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.DerivateGroup {
        + isDummy : boolean
        + isGenerated : boolean
        + lazyPos : int
        + m_RevAgentCase : int
        + m_Transitive : int
        + nexts : HashMap<String, MorphCase>
        + nextsRef : HashMap<String, MorphCase>
        + notGenerate : boolean
        + prefix : String
        + tag : Object
        + words : ArrayList<DerivateWord>
        + DerivateGroup()
        {static} + _new56()
        + containsWord()
        + createByPrefix()
        + getRevAgentCase()
        + getTransitive()
        + toString()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.DerivateWord {
        + reflexive : boolean
        + spelling : String
        + tag : Object
        + DerivateWord()
        + DerivateWord()
        {static} + _new57()
        + toString()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.ExplanWordAttr {
        {static} + UNDEFINED : ExplanWordAttr
        + value : short
        + ExplanWordAttr()
        + ExplanWordAttr()
        {static} + _new58()
        + equals()
        + hashCode()
        + isAnimal()
        + isAnimated()
        + isCanPersonAfter()
        + isEmoNegative()
        + isEmoPositive()
        + isMan()
        + isMeasured()
        + isNamed()
        + isNumbered()
        + isSpaceObject()
        + isTimeObject()
        + isUndefined()
        {static} + ooBitand()
        {static} + ooBitor()
        {static} + ooEq()
        {static} + ooNoteq()
        + setAnimal()
        + setAnimated()
        + setEmoNegative()
        + setEmoPositive()
        + setMan()
        + setMeasured()
        + setNamed()
        + setNumbered()
        + setPersonAfter()
        + setSpaceObject()
        + setTimeObject()
        + setUndefined()
        + toString()
        - getValue()
        - setValue()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.Explanatory {
        {static} + m_Lock : Object
        {static} - m_DerRu : DerivateDictionary
        + Explanatory()
        {static} + findDerivates()
        {static} + findWords()
        {static} + getLoadedLanguages()
        {static} + getWordClassVar()
        {static} + initialize()
        {static} + isAnimated()
        {static} + isNamed()
        {static} + loadLanguages()
        {static} + unloadLanguages()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.LanguageHelper {
        {static} + m_CyrChars : String
        {static} + m_CyrGreekChars : String
        {static} + m_GreekChars : String
        {static} + m_LatChars : String
        {static} - m_Cases : MorphCase[]
        {static} - m_PrepCases : HashMap<String, MorphCase>
        {static} - m_PrepNorms : HashMap<String, String>
        {static} - m_PrepNormsSrc : String[]
        {static} - m_Preps : String[]
        {static} - m_Rus0 : String
        {static} - m_Rus1 : String
        {static} - m_UdarChars : String
        {static} - m_UdarCyrChars : String
        + LanguageHelper()
        {static} + correctWord()
        {static} + endsWith()
        {static} + endsWithEx()
        {static} + getCaseAfterPreposition()
        {static} + getCyrForLat()
        {static} + getLanguageForText()
        {static} + getLatForCyr()
        {static} + isApos()
        {static} + isCyrillic()
        {static} + isCyrillicChar()
        {static} + isCyrillicVowel()
        {static} + isHiphen()
        {static} + isLatin()
        {static} + isLatinChar()
        {static} + isLatinVowel()
        {static} + isQuote()
        {static} + normalizePreposition()
        {static} + toStringMorphAspect()
        {static} + toStringMorphFinite()
        {static} + toStringMorphForm()
        {static} + toStringMorphGender()
        {static} + toStringMorphMood()
        {static} + toStringMorphNumber()
        {static} + toStringMorphPerson()
        {static} + toStringMorphTense()
        {static} + toStringMorphVoice()
        {static} + transliteralCorrection()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.MorphAspect {
        {static} + IMPERFECTIVE : MorphAspect
        {static} + PERFECTIVE : MorphAspect
        {static} + UNDEFINED : MorphAspect
        {static} - m_Keys : Collection<Integer>
        {static} - m_Values : MorphAspect[]
        - m_str : String
        - m_val : int
        {static} - mapIntToEnum : HashMap<Integer, MorphAspect>
        {static} - mapStringToEnum : HashMap<String, MorphAspect>
        + compareTo()
        {static} + getValues()
        + hashCode()
        {static} + isDefined()
        {static} + of()
        {static} + of()
        + toString()
        + value()
        - MorphAspect()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.MorphBaseInfo {
        + MorphBaseInfo()
        + MorphBaseInfo()
        + _getClass()
        {static} + _new1829()
        {static} + _new227()
        {static} + _new228()
        {static} + _new2388()
        {static} + _new2484()
        {static} + _new2497()
        {static} + _new2511()
        {static} + _new2533()
        {static} + _new256()
        {static} + _new2580()
        {static} + _new2617()
        {static} + _new2622()
        {static} + _new2624()
        {static} + _new484()
        {static} + _new577()
        {static} + _new578()
        {static} + _new580()
        {static} + _new581()
        {static} + _new584()
        {static} + _new596()
        + _setClass()
        + checkAccord()
        + clone()
        + containsAttr()
        + copyTo()
        + getCase()
        + getGender()
        + getLanguage()
        + getNumber()
        + setCase()
        + setGender()
        + setLanguage()
        + setNumber()
        + toString()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.MorphCase {
        {static} + ACCUSATIVE : MorphCase
        {static} + ALLCASES : MorphCase
        {static} + COMMON : MorphCase
        {static} + DATIVE : MorphCase
        {static} + GENITIVE : MorphCase
        {static} + INSTRUMENTAL : MorphCase
        {static} + NOMINATIVE : MorphCase
        {static} + PARTIAL : MorphCase
        {static} + POSSESSIVE : MorphCase
        {static} + PREPOSITIONAL : MorphCase
        {static} + UNDEFINED : MorphCase
        {static} + VOCATIVE : MorphCase
        + value : short
        {static} - m_Names : String[]
        + MorphCase()
        + MorphCase()
        {static} + _new64()
        + equals()
        + getCount()
        + hashCode()
        + isAccusative()
        + isCommon()
        + isDative()
        + isGenitive()
        + isInstrumental()
        + isNominative()
        + isPartial()
        + isPossessive()
        + isPrepositional()
        + isUndefined()
        + isVocative()
        {static} + ooBitand()
        {static} + ooBitor()
        {static} + ooBitxor()
        {static} + ooEq()
        {static} + ooNoteq()
        {static} + parse()
        + setAccusative()
        + setCommon()
        + setDative()
        + setGenitive()
        + setInstrumental()
        + setNominative()
        + setPartial()
        + setPossessive()
        + setPrepositional()
        + setUndefined()
        + setVocative()
        + toString()
        - getValue()
        - setValue()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.MorphClass {
        {static} + ADJECTIVE : MorphClass
        {static} + ADVERB : MorphClass
        {static} + CONJUNCTION : MorphClass
        {static} + NOUN : MorphClass
        {static} + PERSONALPRONOUN : MorphClass
        {static} + PREPOSITION : MorphClass
        {static} + PRONOUN : MorphClass
        {static} + UNDEFINED : MorphClass
        {static} + VERB : MorphClass
        + value : short
        {static} - m_Names : String[]
        + MorphClass()
        + MorphClass()
        {static} + _new2579()
        {static} + _new79()
        {static} + _new82()
        {static} + _new83()
        {static} + _new84()
        {static} + _new85()
        {static} + _new86()
        {static} + _new87()
        {static} + _new88()
        {static} + _new89()
        {static} + _new90()
        + equals()
        + hashCode()
        + isAdjective()
        {static} + isAdjectiveInt()
        + isAdverb()
        {static} + isAdverbInt()
        + isConjunction()
        {static} + isConjunctionInt()
        + isMisc()
        {static} + isMiscInt()
        + isNoun()
        {static} + isNounInt()
        + isPersonalPronoun()
        {static} + isPersonalPronounInt()
        + isPreposition()
        {static} + isPrepositionInt()
        + isPronoun()
        {static} + isPronounInt()
        + isProper()
        + isProperGeo()
        {static} + isProperGeoInt()
        {static} + isProperInt()
        + isProperName()
        {static} + isProperNameInt()
        + isProperSecname()
        {static} + isProperSecnameInt()
        + isProperSurname()
        {static} + isProperSurnameInt()
        + isUndefined()
        + isVerb()
        {static} + isVerbInt()
        {static} + ooBitand()
        {static} + ooBitor()
        {static} + ooBitxor()
        {static} + ooEq()
        {static} + ooNoteq()
        + setAdjective()
        + setAdverb()
        + setConjunction()
        + setMisc()
        + setNoun()
        + setPersonalPronoun()
        + setPreposition()
        + setPronoun()
        + setProper()
        + setProperGeo()
        + setProperName()
        + setProperSecname()
        + setProperSurname()
        + setUndefined()
        + setVerb()
        + toString()
        - getValue()
        - setValue()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.MorphFinite {
        {static} + FINITE : MorphFinite
        {static} + GERUND : MorphFinite
        {static} + INFINITIVE : MorphFinite
        {static} + PARTICIPLE : MorphFinite
        {static} + UNDEFINED : MorphFinite
        {static} - m_Keys : Collection<Integer>
        {static} - m_Values : MorphFinite[]
        - m_str : String
        - m_val : int
        {static} - mapIntToEnum : HashMap<Integer, MorphFinite>
        {static} - mapStringToEnum : HashMap<String, MorphFinite>
        + compareTo()
        {static} + getValues()
        + hashCode()
        {static} + isDefined()
        {static} + of()
        {static} + of()
        + toString()
        + value()
        - MorphFinite()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.MorphForm {
        {static} + SHORT : MorphForm
        {static} + SYNONYM : MorphForm
        {static} + UNDEFINED : MorphForm
        {static} - m_Keys : Collection<Integer>
        {static} - m_Values : MorphForm[]
        - m_str : String
        - m_val : int
        {static} - mapIntToEnum : HashMap<Integer, MorphForm>
        {static} - mapStringToEnum : HashMap<String, MorphForm>
        + compareTo()
        {static} + getValues()
        + hashCode()
        {static} + isDefined()
        {static} + of()
        {static} + of()
        + toString()
        + value()
        - MorphForm()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.MorphGender {
        {static} + FEMINIE : MorphGender
        {static} + MASCULINE : MorphGender
        {static} + NEUTER : MorphGender
        {static} + UNDEFINED : MorphGender
        {static} - m_Keys : Collection<Integer>
        {static} - m_Values : MorphGender[]
        - m_str : String
        - m_val : int
        {static} - mapIntToEnum : HashMap<Integer, MorphGender>
        {static} - mapStringToEnum : HashMap<String, MorphGender>
        + compareTo()
        {static} + getValues()
        + hashCode()
        {static} + isDefined()
        {static} + of()
        {static} + of()
        + toString()
        + value()
        - MorphGender()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.MorphLang {
        {static} + BY : MorphLang
        {static} + EN : MorphLang
        {static} + IT : MorphLang
        {static} + KZ : MorphLang
        {static} + RU : MorphLang
        {static} + UA : MorphLang
        {static} + UNKNOWN : MorphLang
        + value : short
        {static} - m_Names : String[]
        + MorphLang()
        + MorphLang()
        {static} + _new10()
        {static} + _new93()
        {static} + _new94()
        {static} + _new95()
        {static} + _new96()
        {static} + _new97()
        {static} + _new98()
        + equals()
        + hashCode()
        + isBy()
        + isCyrillic()
        + isEn()
        + isIt()
        + isKz()
        + isRu()
        + isUa()
        + isUndefined()
        {static} + ooBitand()
        {static} + ooBitor()
        {static} + ooEq()
        {static} + ooNoteq()
        + setBy()
        + setEn()
        + setIt()
        + setKz()
        + setRu()
        + setUa()
        + setUndefined()
        + toString()
        {static} + tryParse()
        - getValue()
        - setValue()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.MorphMiscInfo {
        + id : int
        + m_Value : short
        - m_Attrs : ArrayList<String>
        + MorphMiscInfo()
        + clone()
        + getAspect()
        + getAttrs()
        + getForm()
        + getMood()
        + getPerson()
        + getTense()
        + getVoice()
        + isSynonymForm()
        + setAspect()
        + setMood()
        + setPerson()
        + setSynonymForm()
        + setTense()
        + setVoice()
        + toString()
        - _addAttr()
        - getValue()
        - setValue()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.MorphMood {
        {static} + IMPERATIVE : MorphMood
        {static} + INDICATIVE : MorphMood
        {static} + SUBJUNCTIVE : MorphMood
        {static} + UNDEFINED : MorphMood
        {static} - m_Keys : Collection<Integer>
        {static} - m_Values : MorphMood[]
        - m_str : String
        - m_val : int
        {static} - mapIntToEnum : HashMap<Integer, MorphMood>
        {static} - mapStringToEnum : HashMap<String, MorphMood>
        + compareTo()
        {static} + getValues()
        + hashCode()
        {static} + isDefined()
        {static} + of()
        {static} + of()
        + toString()
        + value()
        - MorphMood()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.MorphNumber {
        {static} + PLURAL : MorphNumber
        {static} + SINGULAR : MorphNumber
        {static} + UNDEFINED : MorphNumber
        {static} - m_Keys : Collection<Integer>
        {static} - m_Values : MorphNumber[]
        - m_str : String
        - m_val : int
        {static} - mapIntToEnum : HashMap<Integer, MorphNumber>
        {static} - mapStringToEnum : HashMap<String, MorphNumber>
        + compareTo()
        {static} + getValues()
        + hashCode()
        {static} + isDefined()
        {static} + of()
        {static} + of()
        + toString()
        + value()
        - MorphNumber()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.MorphPerson {
        {static} + FIRST : MorphPerson
        {static} + SECOND : MorphPerson
        {static} + THIRD : MorphPerson
        {static} + UNDEFINED : MorphPerson
        {static} - m_Keys : Collection<Integer>
        {static} - m_Values : MorphPerson[]
        - m_str : String
        - m_val : int
        {static} - mapIntToEnum : HashMap<Integer, MorphPerson>
        {static} - mapStringToEnum : HashMap<String, MorphPerson>
        + compareTo()
        {static} + getValues()
        + hashCode()
        {static} + isDefined()
        {static} + of()
        {static} + of()
        + toString()
        + value()
        - MorphPerson()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.MorphTense {
        {static} + FUTURE : MorphTense
        {static} + PAST : MorphTense
        {static} + PRESENT : MorphTense
        {static} + UNDEFINED : MorphTense
        {static} - m_Keys : Collection<Integer>
        {static} - m_Values : MorphTense[]
        - m_str : String
        - m_val : int
        {static} - mapIntToEnum : HashMap<Integer, MorphTense>
        {static} - mapStringToEnum : HashMap<String, MorphTense>
        + compareTo()
        {static} + getValues()
        + hashCode()
        {static} + isDefined()
        {static} + of()
        {static} + of()
        + toString()
        + value()
        - MorphTense()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.MorphToken {
        + beginChar : int
        + endChar : int
        + tag : Object
        + term : String
        + wordForms : ArrayList<MorphWordForm>
        - m_Lemma : String
        + MorphToken()
        + getLanguage()
        + getLemma()
        + getLength()
        + getSourceText()
        + setLanguage()
        + setLemma()
        + toString()
        - compareForms()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.MorphVoice {
        {static} + ACTIVE : MorphVoice
        {static} + MIDDLE : MorphVoice
        {static} + PASSIVE : MorphVoice
        {static} + UNDEFINED : MorphVoice
        {static} - m_Keys : Collection<Integer>
        {static} - m_Values : MorphVoice[]
        - m_str : String
        - m_val : int
        {static} - mapIntToEnum : HashMap<Integer, MorphVoice>
        {static} - mapStringToEnum : HashMap<String, MorphVoice>
        + compareTo()
        {static} + getValues()
        + hashCode()
        {static} + isDefined()
        {static} + of()
        {static} + of()
        + toString()
        + value()
        - MorphVoice()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.MorphWordForm {
        + normalCase : String
        + normalFull : String
        + tag : Object
        + undefCoef : short
        + MorphWordForm()
        + MorphWordForm()
        {static} + _new16()
        {static} + _new684()
        + clone()
        + containsAttr()
        + copyToWordForm()
        {static} + hasMorphEquals()
        + isInDictionary()
        + toString()
        + toStringEx()
    }
  }
  

  namespace com.pullenti.morph {
    class com.pullenti.morph.Morphology {
        {static} + LAZYLOAD : boolean
        {static} - m_EmptyMisc : MorphMiscInfo
        {static} - m_EmptyWordForms : ArrayList<MorphWordForm>
        {static} - m_Inner : InnerMorphology
        + Morphology()
        {static} + convertAdverbToAdjective()
        {static} + correctWord()
        {static} + getAllWordforms()
        {static} + getLoadedLanguages()
        {static} + getWordBaseInfo()
        {static} + getWordform()
        {static} + initialize()
        {static} + loadLanguages()
        {static} + process()
        {static} + tokenize()
        {static} + unloadLanguages()
    }
  }
  

  com.pullenti.morph.DerivateGroup o-- com.pullenti.morph.internal.NextModelQuestion : questions
  com.pullenti.morph.DerivateGroup o-- com.pullenti.morph.internal.NextModelQuestion : questionsRef
  com.pullenti.morph.DerivateWord o-- com.pullenti.morph.MorphClass : _class
  com.pullenti.morph.DerivateWord o-- com.pullenti.morph.MorphAspect : aspect
  com.pullenti.morph.DerivateWord o-- com.pullenti.morph.ExplanWordAttr : attrs
  com.pullenti.morph.DerivateWord o-- com.pullenti.morph.DerivateGroup : group
  com.pullenti.morph.DerivateWord o-- com.pullenti.morph.MorphLang : lang
  com.pullenti.morph.DerivateWord o-- com.pullenti.morph.MorphTense : tense
  com.pullenti.morph.DerivateWord o-- com.pullenti.morph.MorphVoice : voice
  com.pullenti.morph.MorphAspect .up.|> java.lang.Comparable
  com.pullenti.morph.MorphBaseInfo o-- com.pullenti.morph.MorphGender : _gender
  com.pullenti.morph.MorphBaseInfo o-- com.pullenti.morph.MorphNumber : _number
  com.pullenti.morph.MorphBaseInfo o-- com.pullenti.morph.MorphCase : m_Cas
  com.pullenti.morph.MorphBaseInfo o-- com.pullenti.morph.MorphClass : m_Cla
  com.pullenti.morph.MorphBaseInfo o-- com.pullenti.morph.MorphLang : m_Lang
  com.pullenti.morph.MorphFinite .up.|> java.lang.Comparable
  com.pullenti.morph.MorphForm .up.|> java.lang.Comparable
  com.pullenti.morph.MorphGender .up.|> java.lang.Comparable
  com.pullenti.morph.MorphMood .up.|> java.lang.Comparable
  com.pullenti.morph.MorphNumber .up.|> java.lang.Comparable
  com.pullenti.morph.MorphPerson .up.|> java.lang.Comparable
  com.pullenti.morph.MorphTense .up.|> java.lang.Comparable
  com.pullenti.morph.MorphToken o-- com.pullenti.morph.CharsInfo : charInfo
  com.pullenti.morph.MorphToken o-- com.pullenti.morph.MorphLang : m_Language
  com.pullenti.morph.MorphVoice .up.|> java.lang.Comparable
  com.pullenti.morph.MorphWordForm -up-|> com.pullenti.morph.MorphBaseInfo
  com.pullenti.morph.MorphWordForm o-- com.pullenti.morph.MorphMiscInfo : misc


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
